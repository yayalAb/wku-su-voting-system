# Generated by Django 3.2.4 on 2021-08-02 10:36

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnnounceModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Ann_By', models.CharField(max_length=20)),
                ('Ann_Title', models.CharField(max_length=200)),
                ('Ann_Dis', models.TextField(max_length=1000)),
                ('Ann_Date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'announcement_announcemodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CampaignModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camp_by', models.CharField(max_length=20)),
                ('camp_title', models.CharField(max_length=200)),
                ('camp_dis', models.TextField(max_length=3000)),
                ('camp_date', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'campaign_campaign',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComplainModel',
            fields=[
                ('com_id', models.AutoField(primary_key=True, serialize=False)),
                ('comp_by', models.CharField(max_length=20)),
                ('comp_dis', models.TextField(max_length=1000)),
                ('comp_to', models.CharField(choices=[('Admin', 'Admin Group'), ('Committee', 'Election Committee Group')], max_length=50)),
                ('comp_date', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'complain_complainmodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='notesModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('noteID', models.CharField(default='1234', max_length=20)),
                ('noteTitle', models.CharField(max_length=100)),
                ('noteContent', models.CharField(max_length=1000, null=True)),
                ('createDateTime', models.DateField(auto_now_add=True)),
                ('latestEditDateTime', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'notesModel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Responsemodel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comp_response', models.TextField(max_length=1000)),
                ('response_by', models.CharField(max_length=50)),
                ('response_group', models.CharField(max_length=50)),
                ('response_date', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'complain_response1',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ScheduleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=200)),
                ('Start_date', models.DateField()),
                ('End_date', models.DateField()),
                ('Scheduled_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'schedule_voting_day_schedulemodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20)),
                ('user_fname', models.CharField(max_length=50)),
                ('user_lname', models.CharField(max_length=50)),
                ('user_gender', models.CharField(max_length=7)),
                ('user_email', models.EmailField(max_length=100)),
                ('user_phone', models.CharField(max_length=20)),
                ('user_role', models.CharField(max_length=30)),
                ('user_status', models.BooleanField(default=True)),
                ('registered', models.BooleanField(default=False)),
                ('user_fp', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'user_information',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Voters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20, unique=True)),
                ('stat', models.BooleanField(default=False)),
                ('cand1', models.BooleanField(default=False)),
                ('cand2', models.BooleanField(default=False)),
                ('cand3', models.BooleanField(default=False)),
                ('cand4', models.BooleanField(default=False)),
                ('cand5', models.BooleanField(default=False)),
                ('cand6', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'vote_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VotingModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20)),
                ('protocol', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('presentation_skill', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(15.0)])),
                ('confidence', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('strategic_plane', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(20.0)])),
                ('answering', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('Time_management', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('certifcate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('written_exam', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('oral_interview', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('Str_and_opra_plane', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(15.0)])),
                ('Total_40', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('Total_60', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('Total_100', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
            ],
            options={
                'db_table': 'vote_votingmodel',
                'managed': False,
            },
        ),
    ]
